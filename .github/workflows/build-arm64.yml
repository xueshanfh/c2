name: Build Android ARM64 FastIO (Android NDK compatible)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build-android-arm64:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up QEMU for ARM64
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create Android NDK Build Dockerfile
      run: |
        cat > Dockerfile.android << 'EOF'
        # Use Ubuntu base for Android NDK
        FROM ubuntu:22.04
        
        # Install dependencies
        RUN apt-get update && apt-get install -y \
            wget unzip build-essential file \
            && rm -rf /var/lib/apt/lists/*
        
        # Download and install Android NDK
        WORKDIR /opt
        RUN wget https://dl.google.com/android/repository/android-ndk-r25c-linux.zip && \
            unzip android-ndk-r25c-linux.zip && \
            rm android-ndk-r25c-linux.zip
        
        ENV ANDROID_NDK_ROOT=/opt/android-ndk-r25c
        ENV TOOLCHAIN=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64
        ENV CC=$TOOLCHAIN/bin/aarch64-linux-android21-clang
        
        WORKDIR /build
        
        # Create Android-compatible source
        RUN cat > fastio_android.c << 'CEOF'
        #include <stdio.h>
        #include <stdlib.h>
        #include <string.h>
        #include <errno.h>
        
        typedef struct lua_State lua_State;
        
        extern void lua_pushstring(lua_State *L, const char *s);
        extern void lua_pushlstring(lua_State *L, const char *s, size_t len);
        extern void lua_pushnil(lua_State *L);
        extern const char *lua_tolstring(lua_State *L, int idx, size_t *len);
        
        #define CHUNK_SIZE (1024 * 1024)
        
        static int android_read_chunk(lua_State *L) {
            size_t len;
            const char *path = lua_tolstring(L, 1, &len);
            if (!path) {
                lua_pushnil(L);
                return 1;
            }
            
            FILE *fp = fopen(path, "rb");
            if (!fp) {
                lua_pushnil(L);
                return 1;
            }
            
            fseek(fp, 0, SEEK_END);
            long file_size = ftell(fp);
            fseek(fp, 0, SEEK_SET);
            
            if (file_size < 0) {
                fclose(fp);
                lua_pushnil(L);
                return 1;
            }
            
            char *buffer = (char*)malloc(file_size + 1);
            if (!buffer) {
                fclose(fp);
                lua_pushnil(L);
                return 1;
            }
            
            size_t total_read = 0;
            while (total_read < (size_t)file_size) {
                size_t to_read = (file_size - total_read > CHUNK_SIZE) ? 
                                CHUNK_SIZE : (file_size - total_read);
                size_t nread = fread(buffer + total_read, 1, to_read, fp);
                if (nread == 0) {
                    if (ferror(fp)) {
                        free(buffer);
                        fclose(fp);
                        lua_pushnil(L);
                        return 1;
                    }
                    break;
                }
                total_read += nread;
            }
            
            fclose(fp);
            buffer[total_read] = '\0';
            
            lua_pushlstring(L, buffer, total_read);
            free(buffer);
            return 1;
        }
        
        __attribute__((visibility("default"))) 
        int fastio_read_chunk(lua_State *L) {
            return android_read_chunk(L);
        }
        CEOF
        
        # Build with Android NDK
        RUN $CC -O3 -fPIC -Wall -Wextra -std=c99 \
            -march=armv8-a \
            -DNDEBUG -fstack-protector \
            -c fastio_android.c -o fastio.o
        
        RUN $CC -shared -fPIC \
            -Wl,-soname,fastio.so \
            -o fastio.so fastio.o
        
        # Verify Android build
        RUN echo "=== Android ARM64 FastIO ===" && \
            file fastio.so && \
            ls -la fastio.so && \
            echo "=== Android Dependencies ===" && \
            (readelf -d fastio.so | grep NEEDED || echo "Minimal deps - good for Android")
        
        CMD ["tail", "-f", "/dev/null"]
        EOF
    
    - name: Build Android ARM64 FastIO
      run: |
        docker buildx build --platform linux/amd64 \
          -f Dockerfile.android \
          -t fastio-android-ndk:latest \
          --load \
          .
        
        mkdir -p output
        
        docker run --rm \
          -v $PWD/output:/output \
          fastio-android-ndk:latest \
          cp /build/fastio.so /output/
        
        echo "=== Android Build Results ==="
        ls -la output/
        file output/fastio.so
    
    - name: Upload Android ARM64 binary
      uses: actions/upload-artifact@v4
      with:
        name: fastio-android-arm64
        path: output/fastio.so
        retention-days: 90
