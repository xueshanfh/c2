name: Build Direct ARM64 FastIO (No Module System)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build-direct-arm64:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up QEMU for ARM64
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create Direct Build Dockerfile
      run: |
        cat > Dockerfile.direct << 'EOF'
        FROM arm64v8/alpine:3.18
        
        RUN apk add --no-cache build-base musl-dev file
        
        WORKDIR /build
        COPY fastio_direct.c .
        
        # Build direct C library - no module system dependencies
        RUN gcc -O3 -fPIC -Wall -Wextra -std=c99 \
            -march=armv8-a -mtune=cortex-a72 \
            -DNDEBUG -fstack-protector \
            -c fastio_direct.c -o fastio.o
        
        RUN gcc -shared -fPIC \
            -Wl,-soname,fastio.so \
            -o fastio.so fastio.o
        
        # Verify build
        RUN echo "=== Direct ARM64 FastIO ===" && \
            file fastio.so && \
            ls -la fastio.so && \
            nm -D fastio.so | grep fastio
        
        CMD ["tail", "-f", "/dev/null"]
        EOF
    
    - name: Build Direct ARM64 FastIO
      run: |
        docker buildx build --platform linux/arm64 \
          -f Dockerfile.direct \
          -t fastio-direct-arm64:latest \
          --load \
          .
        
        mkdir -p output
        
        docker run --rm --platform linux/arm64 \
          -v $PWD/output:/output \
          fastio-direct-arm64:latest \
          cp /build/fastio.so /output/
        
        echo "=== Direct Build Results ==="
        ls -la output/
        file output/fastio.so
    
    - name: Upload Direct ARM64 binary
      uses: actions/upload-artifact@v4
      with:
        name: fastio-direct-arm64
        path: output/fastio.so
        retention-days: 90
